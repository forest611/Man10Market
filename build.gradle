plugins {
    id 'java'
    id 'org.jetbrains.kotlin.jvm' version '2.1.0'
    id 'com.github.johnrengelman.shadow' version '7.1.2'
}

group = 'red.man10'
version = '1.0'

repositories {
    mavenCentral()
    maven {
        name = 'papermc-repo'
        url = 'https://repo.papermc.io/repository/maven-public/'
    }
    maven {
        name = 'sonatype'
        url = 'https://oss.sonatype.org/content/groups/public/'
    }
    maven { url 'https://jitpack.io' }
}

dependencies {
    compileOnly 'io.papermc.paper:paper-api:1.20.4-R0.1-SNAPSHOT'
    compileOnly fileTree(dir: 'libs', include: '*.jar')
    compileOnly "org.jetbrains.kotlin:kotlin-stdlib-jdk8"
    compileOnly "org.jetbrains.kotlin:kotlin-reflect"
    // OpenAI Java APIクライアント
    implementation 'com.openai:openai-java:0.33.0'
    // Kotlinコルーチン
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-core:1.7.3'
    implementation 'org.jetbrains.kotlinx:kotlinx-coroutines-jdk8:1.7.3'
}

def targetJavaVersion = 17
java {
    def javaVersion = JavaVersion.toVersion(targetJavaVersion)
    sourceCompatibility = javaVersion
    targetCompatibility = javaVersion
    if (JavaVersion.current() < javaVersion) {
        toolchain.languageVersion = JavaLanguageVersion.of(targetJavaVersion)
    }
}

tasks.withType(JavaCompile).configureEach {
    if (targetJavaVersion >= 10 || JavaVersion.current().isJava10Compatible()) {
        options.release = targetJavaVersion
    }
}

tasks.withType(Jar) {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

// shadowJarをデフォルトのビルドタスクに設定
defaultTasks 'shadowJar'

// buildタスクが実行されたときにshadowJarも実行されるように設定
build.dependsOn shadowJar

shadowJar {
    // すべての実装依存関係を含める
    dependencies {
        include(dependency('com.openai:openai-java'))
        include(dependency('org.jetbrains.kotlinx:kotlinx-coroutines-core'))
        include(dependency('org.jetbrains.kotlinx:kotlinx-coroutines-jdk8'))
        // OpenAIの依存関係も含める
        include(dependency('com.squareup.okhttp3:okhttp'))
        include(dependency('com.squareup.retrofit2:retrofit'))
        include(dependency('com.squareup.retrofit2:converter-gson'))
        include(dependency('com.google.code.gson:gson'))
    }
    
    // リロケーション設定
    relocate 'com.openai', 'red.man10.man10market.libs.openai'
    relocate 'kotlinx.coroutines', 'red.man10.man10market.libs.kotlinx.coroutines'
    relocate 'okhttp3', 'red.man10.man10market.libs.okhttp3'
    relocate 'retrofit2', 'red.man10.man10market.libs.retrofit2'
    relocate 'com.google.gson', 'red.man10.man10market.libs.gson'
    
    // 出力ファイル名を設定
    archiveClassifier.set('')
}

processResources {
    def props = [version: version]
    inputs.properties props
    filteringCharset 'UTF-8'
    filesMatching('plugin.yml') {
        expand props
    }
}
compileKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}
compileTestKotlin {
    kotlinOptions {
        jvmTarget = "17"
    }
}